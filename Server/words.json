{
    "fields": "A Java field is a variable inside a class",
    "constructor": "A constructor is a special method of a class or structure in object-oriented programming that initializes a newly created object of that type. Whenever an object is created, the constructor is called automatically.",
    "methods": "A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions.",
    "private": "Private is a Java keyword which declares a member's access as private. That is, the member is only visible within the class, not from any other class (including subclasses).",
    "public": "Public is a Java keyword which declares a member's access as public. Public members are visible to all other classes. This means that any other class can access a public field or method.",
    "protected": "The protected keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses.",
    "string": "In Java, a string is an object that represents a number of character values. Each letter in the string is a separate character value that makes up the Java string object. Characters in Java are represented by the char class. Users can write an array of char values that will mean the same thing as a string.",
    "int": "int stores integers (whole numbers), without decimals, such as 123 or -123.",
    "integer": "An integer in Java is a memory location that can hold an integer, a positive or negative non-decimal number. It is denoted by the keyword, 'int'.",
    "boolean": "The boolean keyword is a data type that can only take the values true or false.",
    "char": "The c har keyword is a data type that is used to store a single character. A char value must be surrounded by single quotes, like 'A' or 'c'.",
    "variable": "Variables are containers for storing data values.",
    "object": "In the Java programming language, an object is an instance of a Java class, meaning it is a copy of a specific class.",
    "parameter": "Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in when the method is invoked. When you invoke a method, the arguments used must match the declaration's parameters in type and order.",
    "actual": "The actual parameter is used to invoke or pass the information while executing the program.",
    "formal": "The formal parameters are declared while calling the function.",
    "declaration": "The variable declaration means creating a variable in a program for operating different information.",
    "instantiate": "When you create an object, you are creating an 'instance' of a class, therefore 'instantiating' a class.",
    "local": "A local class has access to the members of its enclosing class.",
    "global": "Global variables are the variables that can be accessed anywhere in the java program.",
    "accessor": "In Java, accessor methods return the value of a private variable.",
    "mutator": "In Java, mutator methods reset/modify the value of a private variable.",
    "array": "An array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed.",
    "arraylists": "The ArrayList class is a resizable array, which can be found in the java.util package. The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified.",
    "hashmap": "Java HashMap is a class which is used to perform operations such as inserting, deleting and locating elements in a map. We create a map, where we pass two kinds of values which are 'key' and 'value'.",
    "hashsets": "HashSet in Java is a class from the Collections Framework. It allows you to store multiple values in a collection using a hash table. The hash table stores the values in an unordered method with the help of hashing mechanism.",
    "key": "The key of a value determines where in the table the value will be stored, by way of some hash function. They key is used in a hash in the same way that an index is used in an array.",
    "dictionary": "A Java dictionary is an abstract class that stores key-value pairs. Given a key, its corresponding value can be stored and retrieved as needed.",
    "linkedlist": "A linked list in Java is a dynamic data structure whose size increases as you add the elements and decreases as you remove the elements from the list. The elements in the linked list are stored in containers. The list holds the link to the first container.",
    "polymorphism": "What is polymorphism? Polymorphism is a feature of object-oriented programming languages that allows a specific routine to use variables of different types at different times.",
    "abstract": "An abstract class, in the context of Java, is a superclass that cannot be instantiated and is used to state or define general characteristics.",
    "classes": "A class describes the contents of the objects that belong to it.",
    "inheritance": "Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes.",
    "coupling": "Coupling is nothing but the dependency of one class on the other. If one object in a code uses the other object in the program, it is called loose coupling in Java.",
    "cohesion": "Cohesion in Java is the Object-Oriented principle most closely associated with making sure that a class is designed with a single, well-focused purpose. In object-oriented design, cohesion refers to how a single class is designed. The more focused a class is, the more is the cohesiveness of that class.",
    "enum": "An enum is a special 'class' that represents a group of constants.",
    "annotation": "Annotations in Java provide additional information to the compiler and JVM. An annotation is a tag representing metadata about classes, interfaces, variables, methods, or fields. Annotations do not impact the execution of the code that they annotate.",
    "subtyping": "In Java, S is a subtype of T if S extends or implements T. Subtyping is transitive, meaning that if R is a subtype of S, then R is also a subtype of T (T is the super type of both Sand R).",
    "substitution": "It just means that if you have a variable of a given type you can assign it to a value that is a subtype of that type.",
    "superclass": "The class from which the subclass is derived is called a superclass.",
    "subclass": "A class that is derived from another class is called a subclass.",
    "casting": "Casting is when you assign a value of one primitive data type to another type.",
    "upcasting": "Upcasting is a type of object typecasting inwhich a child object is typecasted to a parent class object.",
    "downcasting": "Downcasting is typecasting from a superclass to a subclass so that we can access the methods of the subclass",
    "this": "The this keyword refers to the current object in a method or constructor. The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name.",
    "overriding": "In Java, method overriding occurs when a subclass has the same method as the parent class.",
    "iterator": "An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.",
    "overloading": "Method overloading in java is a feature that allows a class to have more than one method with the same name, but with different parameters.",
    "static": "When you declare a variable or a method as static, it belongs to the class, rather than a specific instance. This means that only one instance of a static member exists, even if you create multiple objects of the class, or if you don't create any. It will be shared by all objects.",
    "final": "The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable."
}